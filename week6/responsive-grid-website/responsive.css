body {
    font-size: 15px;
  }
  
  button {
    background: #ffc600;
    border: 0;
    padding: 10px 20px;
  }
  
  img {
    max-width: 100%;
  }
  
  .wrapper {
    display: grid; /* making the wrapper a grid with gap replaces the need for margins almost everywhere else!!! Also allows for 'order' property to move elements around as needed */
    grid-gap: 20px;
  }
  
  .top {
    display: grid;
    grid-gap: 20px;
    grid-template-areas:
      "hero hero cta1"
      "hero hero cta2"
  }
  
  .hero {
    grid-area: hero;
    min-height: 400px;
    background: white url(images/taco.jpg);
    background-size: cover; /* tells browser to fill the space with the image */
    background-position: bottom right; /* makes the taco (bottom right side of image) the focal point - will cause opposite corner to adjust to size changes */
    padding: 50px; /* pushes flex content away from edge of element */
    display: flex; /* if using grid here, the items inside would span the full column width but we want them to be only their actual width so use flex instead of grid */
    flex-direction: column;
    align-items: start; /* items to left of page */
    justify-content: center;
  }
  
  .hero > * {
    background: var(--yellow);
    padding: 1rem;
  }

  /* .hero h1, h2 { // selector method above does same thing in a simpler way
    background: var(--yellow);
    padding: 1rem; 
  } */
  
  .cta {
    background: var(--yellow);
    display: grid;
    align-items: center;
    justify-items: center;
    align-content: center;
    border: 3px solid var(--red);
  }
  
  .cta p {
    margin: 0;
  }
  
  .cta1 {
    grid-area: cta1;
  }
  
  .cta2 {
    grid-area: cta2;
  }
  
  .price {
    font-size: 6rem; /* this line and the next appear to give identical results */
    /* font-size: 60px; */
    font-weight: 300;
  }
  
  .menu ul {
    display: grid;
    grid-gap: 10px;
    padding: 0;
    list-style: none;
    grid-template-columns: repeat(auto-fit, minmax(100px, 1fr)); /* 'auto-fit' says "make as many columns as needed" and the 'minmax' says "make them no less than 100px and as wide as space allows */
  }
  
  .menu a {
    background: var(--orange);
    display: block; /* 'a' is inline by default which makes them only as wide as their content so they would be random widths - block makes them even sizing */
    text-decoration: none;
    padding: 10px;
    text-align: center;
    color: var(--black);
    text-transform: uppercase;
    font-size: 20px;
  }
  
  [aria-controls="menu-list"] {
    display: none;
  }
  
  .features {
    display: grid;
    grid-gap: 20px;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }
  
  .feature {
    background: white;
    padding: 10px;
    border: 1px solid white;
    text-align: center;
    box-shadow: 0 0 4px  rgba(0,0,0,0.1);
  }
  
  .feature .icon {
    font-size: 50px;
  }
  .feature p {
    color: rgba(0,0,0,0.5);
  }
  
  .about {
    background: white;
    padding:50px;
    display: grid;
    grid-template-columns: 400px 1fr;
    align-items: center;
  }
  
  .gallery {
    display: grid;
    grid-gap: 20px;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  }
  
  .gallery img {
    width: 100%;
  }
  
  .gallery h2 {
    grid-column: 1 / -1; /* forces h2 to span all the way across the grid (-1 is same as 1 at the end of the row) */
    display: grid; /* making the element a grid will allow for :before and :after so we can put decorations into the row */
    grid-template-columns: 1fr auto 1fr; /* make the text fit its actual size and the spaces on each side of it fit whatever space is there */
    grid-gap: 20px;
    align-items: center; /* without center align, everything pushes to the top so the alignment looks bad */
  }
  
  .gallery h2:before, .gallery h2:after {
    display: block;
    content: ''; /* without this, there is nothing in the column to push the text into the center of the row - empty content allows for the inclusion of a background */
    height: 10px;
    background: linear-gradient(to var(--direction, left/*create new variable*/), var(--orange), transparent); /* both gradients are created here but fade in same direction so the selector below is needed */
  }
  
  .gallery h2:after {
    --direction: right; /* changes the direction of the gradient fade for the right side only - gradient created in selector above */
  }
  
  @media (max-width: 1000px) {
    .menu {
      order: -1; /* screens wider than 1000px will have menu under .hero - narrower the menu goes above and becomes hidden behind button */
      perspective: 800px;
    }
    [aria-controls="menu-list"] { /*using 'aria' to tell screenreader what to do with menu when hidden behind button */
      display: block;
      margin-bottom: 10px;
    }
  
    .menu ul {
      max-height: 0; /* remove the space the buttons will fit into when open */
      overflow: hidden; /* without this the buttons will show as a very narrow slice across the screen */
      transform: rotateX(90deg);
      transition: all 0.5s;
    }
  
    [aria-expanded="true"] ~ ul {
      display: grid;
      max-height: 500px;
      transform: rotateX(0);
    }
  
    [aria-expanded="false"] .close {
      display: none;
    }
  
    [aria-expanded="true"] .close {
      display: inline-block;
    }
  
    [aria-expanded="true"] .open {
      display: none;
    }
  
  }
  
  @media (max-width: 700px) { /* now a 2 column layout */
    .top {
      grid-template-areas:
        "hero hero"
        "cta1 cta2"
    }
 
    .about {
      grid-template-columns: 1fr;
    }
  }
  
  @media (max-width: 500px) { /* under 500px wide is 1 column */
    .top {
      grid-template-areas:
        "hero"
        "cta1"
        "cta2"
    }
  }
  